// main module
sey.events.on('before-task-taskname', function () {});

sey.config.load(content);
sey.config.set(key, value);
sey.config.merge(content);
sey.config.save();

sey.fs.mkdirp(path);
sey.fs.rm(fileList);
sey.fs.writeFile();
sey.fs.readFile();
sey.fs.getLastModified();

sey.shell('npm install');

var list = new FileList();
list.include('./src/**/*.js');
list.exclude(/tes[td]\.js/);
var files = x.populate();

// tasks submodule
sey.tasks.add(taskname, prerequisites, function (resolve, reject) {}); // is it necessary?
sey.tasks.add(taskname, prerequisites, Promise);
sey.tasks[taskname].exec();

// bundles submodule
sey.bundles.add('main', { target: 'node', standard: 2016, dest: 'build/' });
sey.bundles.main.ops.add({ src: [], dest: 'extra/', addheader: { enabled: true, banner: 'x' }, eolfix: true });
sey.bundles.main.exec();
sey.bundles.readFromConfig();

// watch submodule
// test submodule
// publish submodule

// TODO yargs-parser to tasks and bundles options
// TODO interactive option input (via readline)
// TODO sey.env for env
// TODO sey.env.os = WIN|UNIX
// TODO sey.exec, childprocess.spawn + stdout

destination: './build/',
ops: [
    {
        src: [ './src/polyfills/**/*.js' ],
        dest: './dist/scripts/',

        addheader: true,
        compile: true,
        eolfix: true,
        optimize: true,
        preprocess: true,
        transpile: true
    }
]

./seyfile.js.lock

{
    core: {
        version: '0.5',
        'seyfile.js': lastMod
    },
    bundles: {
        polyfills: [
            [
                { path: './src/polyfills/test.js', lastMod: 4 },
                { path: './src/polyfills/test2.js', lastMod: 4 }
            ]
        ]
    }
}

---

registerOpClass(AddHeader)
registerOpMethod({ hede: adsa }, function (opFiles) { ... });

// iki metod da olacak.
